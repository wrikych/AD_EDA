plotlyOutput("test_plot"), width = 10),
tabItem("acoustic",
selectInput("acoustic", "Features:", acoustic_features),
plotlyOutput("third_plot"),
selectInput("choosePl", "Playlist:", pl_list),
plotlyOutput("fourth_plot")
),
tabItem("subitem1", "Sub-item 1 tab content"),
tabItem("subitem2", "Sub-item 2 tab content")
)
)
ui <- dashboardPage(skin = 'green',
header,
sidebar,
body
)
server <- function(input, output, session) {
newData <- reactive({
allplists %>% filter(plist==input$choosePl)
})
output$res <- renderText({
paste("You've selected:", input$tabs)
})
output$test_plot <- renderPlotly({
ggplot(allplists, aes(x=allplists[[input$features]], fill=plist)) + geom_density(alpha=0.5) + theme_minimal()
})
output$second_plot <- renderPlotly({
ggcorrplot(mood_corr, hc.order = TRUE, type = "lower",
outline.col = "white",
ggtheme = ggplot2::theme_gray,
colors = c("#6D9EC1", "white", "#E46726"))
})
output$third_plot <- renderPlotly({
ggplot(allplists, aes(x=allplists[[input$acoustic]], fill=plist)) + geom_histogram(alpha=0.5) + theme_minimal()
})
output$fourth_plot <- renderPlotly({
ggplot(newData, aes(x=duration_ms)) + geom_density()
})
}
shinyApp(ui, server)
ui <- dashboardPage(skin = 'green',
header,
sidebar,
body
)
library(shiny)
library(shinydashboard)
library(ggplot2)
library(plotly)
library(ggcorrplot)
allplists <- read.csv("C:/Users/wriky/Documents/data_science/shiny-spotify/allplists.csv")
allplists <- allplists %>% mutate(duration_min = duration_ms/60000)
allplists %>% select(duration_min) %>% head(5)
pl_list <- list("Bagwork","Car","Focused","Medicated","Superior","MMA")
all_features <- colnames(allplists)
mood <- allplists %>% select(danceability, energy, tempo, valence)
mood_features <- colnames(mood)
acoustic <- allplists %>% select(loudness, instrumentalness, duration_min, speechiness)
acoustic_features <- colnames(acoustic)
mood_corr <- round(cor(mood),1)
m.mat <- cor_pmat(mood)
header <- dashboardHeader(title = 'Playlist Analysis')
sidebar <- dashboardSidebar(
sidebarMenu(
# Setting id makes input$tabs give the tabName of currently-selected tab
id = "tabs",
menuItem("Mood", tabName = "mood", icon = icon("heart")),
menuItem("Acoustic Properties", icon = icon("th"), tabName = "acoustic"),
menuItem("Charts", icon = icon("bar-chart-o"),
menuSubItem("Sub-item 1", tabName = "subitem1"),
menuSubItem("Sub-item 2", tabName = "subitem2")
)
),
textOutput("res")
)
body <- dashboardBody(
tabItems(
tabItem("mood",
plotlyOutput("second_plot", width = 400, height = 400),
selectInput("features", "Features:", mood_features),
plotlyOutput("test_plot"), width = 10),
tabItem("acoustic",
selectInput("acoustic", "Features:", acoustic_features),
plotlyOutput("third_plot"),
selectInput("choosePl", "Playlist:", pl_list),
plotlyOutput("fourth_plot")
),
tabItem("subitem1", "Sub-item 1 tab content"),
tabItem("subitem2", "Sub-item 2 tab content")
)
)
ui <- dashboardPage(skin = 'green',
header,
sidebar,
body
)
server <- function(input, output, session) {
newData <- reactive({
allplists %>% filter(plist==input$choosePl)
})
output$res <- renderText({
paste("You've selected:", input$tabs)
})
output$test_plot <- renderPlotly({
ggplot(allplists, aes(x=allplists[[input$features]], fill=plist)) + geom_density(alpha=0.5) + theme_minimal()
})
output$second_plot <- renderPlotly({
ggcorrplot(mood_corr, hc.order = TRUE, type = "lower",
outline.col = "white",
ggtheme = ggplot2::theme_gray,
colors = c("#6D9EC1", "white", "#E46726"))
})
output$third_plot <- renderPlotly({
ggplot(allplists, aes(x=allplists[[input$acoustic]], fill=plist)) + geom_histogram(alpha=0.5) + theme_minimal()
})
output$fourth_plot <- renderPlotly({
ggplot(newData, aes(x=duration_ms)) + geom_density()
})
}
shinyApp(ui, server)
ui <- dashboardPage(skin = 'green',
header,
sidebar,
body
)
header <- dashboardHeader(title = 'Playlist Analysis')
sidebar <- dashboardSidebar(
sidebarMenu(
# Setting id makes input$tabs give the tabName of currently-selected tab
id = "tabs",
menuItem("Mood", tabName = "mood", icon = icon("heart")),
menuItem("Acoustic Properties", icon = icon("th"), tabName = "acoustic"),
menuItem("Charts", icon = icon("bar-chart-o"),
menuSubItem("Sub-item 1", tabName = "subitem1"),
menuSubItem("Sub-item 2", tabName = "subitem2")
)
),
textOutput("res")
)
sidebar <- dashboardSidebar(
sidebarMenu(
# Setting id makes input$tabs give the tabName of currently-selected tab
id = "tabs",
menuItem("Mood", tabName = "mood", icon = icon("heart")),
menuItem("Acoustic Properties", icon = icon("th"), tabName = "acoustic"),
menuItem("Charts", icon = icon("bar-chart-o"),
menuSubItem("Sub-item 1", tabName = "subitem1"),
menuSubItem("Sub-item 2", tabName = "subitem2")
)
),
textOutput("res")
)
body <- dashboardBody(
tabItems(
tabItem("mood",
plotlyOutput("second_plot", width = 400, height = 400),
selectInput("features", "Features:", mood_features),
plotlyOutput("test_plot"), width = 10),
tabItem("acoustic",
selectInput("acoustic", "Features:", acoustic_features),
plotlyOutput("third_plot"),
selectInput("choosePl", "Playlist:", pl_list),
plotlyOutput("fourth_plot")
),
tabItem("subitem1", "Sub-item 1 tab content"),
tabItem("subitem2", "Sub-item 2 tab content")
)
)
allplists <- allplists %>% mutate(duration_min = duration_ms/60000)
allplists %>% select(duration_min) %>% head(5)
pl_list <- list("Bagwork","Car","Focused","Medicated","Superior","MMA")
all_features <- colnames(allplists)
mood <- allplists %>% select(danceability, energy, tempo, valence)
mood_features <- colnames(mood)
acoustic <- allplists %>% select(loudness, instrumentalness, duration_min, speechiness)
acoustic_features <- colnames(acoustic)
mood_corr <- round(cor(mood),1)
m.mat <- cor_pmat(mood)
mood <- allplists %>% select(danceability, energy, tempo, valence)
all_features <- colnames(allplists)
mood <- allplists %>% select(danceability, energy, tempo, valence)
library(shiny)
library(shinydashboard)
library(ggplot2)
library(plotly)
library(ggcorrplot)
library(tidyverse)
allplists <- read.csv("C:/Users/wriky/Documents/data_science/shiny-spotify/allplists.csv")
allplists <- allplists %>% mutate(duration_min = duration_ms/60000)
allplists %>% select(duration_min) %>% head(5)
pl_list <- list("Bagwork","Car","Focused","Medicated","Superior","MMA")
all_features <- colnames(allplists)
mood <- allplists %>% select(danceability, energy, tempo, valence)
mood_features <- colnames(mood)
acoustic <- allplists %>% select(loudness, instrumentalness, duration_min, speechiness)
acoustic_features <- colnames(acoustic)
mood_corr <- round(cor(mood),1)
m.mat <- cor_pmat(mood)
runApp('data_science/shiny-spotify')
runApp('data_science/shiny-spotify')
runApp('data_science/shiny-spotify')
allplists %>% filter(plist=="Bagwork") %>% filter(duration_min == max(duration_min)) %>% select(track_name)
runApp('data_science/shiny-spotify')
runApp('data_science/shiny-spotify')
allplists %>% filter(plist=='Car') %>% filter(duration_min==max(duration_min)) %>% select(track_name)
allplists %>% filter(plist=='Car') %>% filter(duration_min==max(duration_min)) %>% select(track_name)
allplists %>% filter(plist=='MMA') %>% filter(duration_min==max(duration_min)) %>% select(track_name, duration_min)
allplists %>% filter(plist=='Superior') %>% filter(duration_min==max(duration_min)) %>% select(track_name, duration_min)
allplists %>% filter(plist=='Focused') %>% filter(duration_min==max(duration_min)) %>% select(track_name, duration_min)
allplists %>% filter(plist=='Focused') %>% filter(track_name=='Radar')
allplists %>% filter(plist=='Focused') %>% filter(track_name=='Radar') %>% select(danceability, energy)
allplists %>% filter(plist=='Focused') %>% filter(track_name=='Radar') %>% summarize(count=n())
allplists %>% filter(plist=='Medicated') %>% filter(duration_min==max(duration_min)) %>% select(track_name, duration_min)
runApp('data_science/shiny-spotify')
runApp('data_science/shiny-spotify')
runApp('data_science/shiny-spotify')
runApp('data_science/shiny-spotify')
runApp('data_science/shiny-spotify')
runApp('data_science/shiny-spotify')
runApp('data_science/shiny-spotify')
allplists <- allplists %>% mutate(key_and_mode = ifelse(mode == 0, paste(key_name, "minor", " "), paste(key_name, "major"," "))) %>%
allplists <- allplists %>% mutate(key_and_mode = ifelse(mode == 0, paste(key_name, "minor", " "), paste(key_name, "major"," "))) %>%
allplists <- allplists %>% mutate(key_and_mode = ifelse(mode == 0, paste(key_name, "minor", " "), paste(key_name, "major"," ")))
allplists <- allplists %>% mutate(key_and_mode = ifelse(mode == 0, paste(key_name, "minor", " "), paste(key_name, "major"," ")))
allplists <- allplists %>% mutate(key_and_mode = ifelse(mode == 0, paste(key_name, "minor", " "), paste(key_name, "major"," ")))
allplists <- allplists %>% mutate(key_name = list_of_keys[key+1])
allplists <- allplists %>% mutate(key_and_mode = ifelse(mode == 0, paste(key_name, "minor", " "), paste(key_name, "major"," ")))
list_of_keys = c('C','C#','D','D#','E','F','F#','G','G#','A','A#','B')
allplists <- read.csv("C:/Users/wriky/Documents/data_science/shiny-spotify/allplists.csv")
allplists <- allplists %>% mutate(duration_min = duration_ms/60000)
allplists <- allplists %>% mutate(key_name = list_of_keys[key+1])
allplists <- allplists %>% mutate(key_and_mode = ifelse(mode == 0, paste(key_name, "minor", " "), paste(key_name, "major"," ")))
runApp('data_science/shiny-spotify')
runApp('data_science/shiny-spotify')
runApp('data_science/shiny-spotify')
all_music <- all_music %>% mutate(mode_name = ifelse(mode == 1, 'major', 'minor'))
allplists <- all_music %>% mutate(mode_name = ifelse(mode == 1, 'major', 'minor'))
allplists <- all_music %>% mutate(mode_name = ifelse(mode == 1, 'major', 'minor'))
allplists <- allplists %>% mutate(mode_name = ifelse(mode == 1, 'major', 'minor'))
runApp('data_science/shiny-spotify')
View(allplists)
runApp('data_science/shiny-spotify')
runApp('data_science/shiny-spotify')
runApp('data_science/shiny-spotify')
runApp('data_science/shiny-spotify')
runApp('data_science/shiny-spotify')
runApp('data_science/shiny-spotify')
runApp('data_science/shiny-spotify')
runApp('data_science/shiny-spotify')
allplists %>% filter(plist==pl_list[1]) %>% filter(speechiness==max(speechiness)) %>% select(track_name)
allplists %>% filter(plist==pl_list[1]) %>% filter(speechiness==max(speechiness)) %>% select(track_name, artist)
allplists %>% filter(plist==pl_list[2]) %>% filter(speechiness==max(speechiness)) %>% select(track_name, artist)
allplists %>% filter(plist==pl_list[3]) %>% filter(speechiness==max(speechiness)) %>% select(track_name, artist)
allplists %>% filter(plist==pl_list[4]) %>% filter(speechiness==max(speechiness)) %>% select(track_name, artist)
allplists %>% filter(plist==pl_list[5]) %>% filter(speechiness==max(speechiness)) %>% select(track_name, artist)
runApp('data_science/shiny-spotify')
shiny::runApp('data_science/shiny-spotify')
gc()
library(readr)
epilepsy <- read_csv("data_science/epilepsy/epilepsy.csv")
View(epilepsy)
library(tidyverse)
library(ggplot2)
library(plotly)
library(ggcorrplot)
View(epilepsy)
epilepsy %>% group_by(y) %>% summarize(count=n())
View(epilepsy)
View(epilepsy)
library(readr)
beef_and_buffalo_meat_production_tonnes <- read_csv("data_science/beef-and-buffalo-meat-production-tonnes.csv")
View(beef_and_buffalo_meat_production_tonnes)
meat <- beef_and_buffalo_meat_production_tonnes
View(beef_and_buffalo_meat_production_tonnes)
library(lubridate)
View(beef_and_buffalo_meat_production_tonnes)
meat %>% mutate(year_datetime = as_date(Year))
library(tidyverse)
meat %>% mutate(year_datetime = as_date(Year))
View(beef_and_buffalo_meat_production_tonnes)
View(beef_and_buffalo_meat_production_tonnes)
meat_us <- meat %>% filter(Entity=='United States')
library(ggplot2)
library(readr)
used_cars_data <- read_csv("data_science/used_cars/used_cars_data.csv")
View(used_cars_data)
library(readr)
vehicles <- read_csv("data_science/used_cars/vehicles.csv")
View(vehicles)
library(tidyverse)
library(readr)
cars <- read_csv("data_science/UC_ML/cars.csv")
View(cars)
View(epilepsy)
library(readr)
cars <- read_csv("data_science/UC_ML/cars.csv")
View(cars)
cars %>% select(manufacturer_name) %>% unique %>% summarize(count=n())
library(tidyverse)
cars %>% select(manufacturer_name) %>% unique %>% summarize(count=n())
library(ggplot2)
ggplot(cars,aes(x=manufacturer_name)) + geom_histogram()
ggplot(cars,aes(x=manufacturer_name)) + geom_histogram(stat='count')
cars %>% group_by(manufacturer_name) %>% summarize(count=n()) %>% arrange()
cars %>% group_by(manufacturer_name) %>% summarize(count=n()) %>% arrange(desc=TRUE)
View(cars)
ggplot(cars,aes(x=year_produced, y=price_usd)) + geom_point()
ggplot(cars,aes(x=engine_capacity, y=price_usd)) + geom_point()
View(cars)
ggplot(cars,aes(x=odometer_value, y=price_usd)) + geom_point()
View(cars)
install.packages("prettydoc")
?prettydoc
??prettydoc
View(cars)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
n_distinct(cars$manufacturer_name)
n_distinct(cars$manufacturer_name)
knitr::opts_chunk$set(echo = TRUE)
library(readr)
library(tidyverse)
library(readr)
library(tidyverse)
daily_act <- read_csv('fitbit/dailyActivity_merged.csv')
daily_sleep <- read_csv('fitbit/sleepDay_merged.csv')
weight_log <- read_csv('fitbit/weightLogInfo_merged.csv')
daily_act %>% head(3) %>% knitr::kable()
# daily sleep
daily_sleep %>% head(3) %>% knitr::kable()
# weight log
weight_log %>% head(3) %>% knitr::kable()
paste("Users in daily activity : ",n_distinct(daily_act$Id))
paste("Users in daily sleep : ",n_distinct(daily_sleep$Id))
paste("Users in weight log : ",n_distinct(weight_log$Id))
## checking common values between user ID in daily sleep and daily act
act_id <- unique(daily_act$Id) # daily act unique ID's
sleep_id <- unique(daily_sleep$Id) # daily sleep unique ID's
paste("Number of common values: ",length(intersect(act_id, sleep_id)))
## Daily Activity ###############################################################
paste0("Total Nulls : ",sum(is.na(daily_act)))
paste0("Total Duplicates : ",sum(duplicated(daily_act)))
## Daily Sleep ##################################################################
paste0("Total Nulls : ",sum(is.na(daily_act)))
paste0("Total Duplicates : ",sum(duplicated(daily_act)))
second_fitbit <- read_csv('second_fitbit_data.csv')
second_fitbit %>% head(3) %>% knitr::kable() # glimpse of data
paste("nulls : ",sum(is.na(second_fitbit)))
paste("duplicates : ",sum(duplicated(second_fitbit)))
## Checking if this data set's users overlap with those of daily act and daily sleep
secfit_id <- unique(second_fitbit$Id)
paste("number of ID's in second_fitbit: ", length(secfit_id))
paste("Number of shared values: ", length(intersect(act_id, secfit_id))) ## used act_id from before
library(lubridate)
library(janitor) ## for clean_names() --> makes all spaces underscores, caps lowercase
### Daily Activity ******************************
daily_act <- daily_act %>%
mutate(date = mdy(ActivityDate)) %>%
select(-ActivityDate) %>%
clean_names() ## create a datetime object called date, delete original date column, clean names
daily_act %>% head(3) %>% knitr::kable()
### Daily Sleep *********************************
daily_sleep <- daily_sleep %>%
mutate(date = mdy_hms(SleepDay)) %>%
select(-SleepDay) %>%
clean_names()
daily_sleep %>% head(3) %>% knitr::kable()
### Second Fitbit *******************************
second_fitbit <- second_fitbit %>%
mutate(date = mdy(ActivityDate)) %>%
select(-ActivityDate) %>%
clean_names()
second_fitbit %>% head(3) %>% knitr::kable()
## I should probably rename this to something more descriptive
mar_to_apr_act <- second_fitbit
act_sleep <- inner_join(daily_act, daily_sleep, by=c("id","date"))
paste0("Total number of ID's : ",n_distinct(act_sleep$id))
act_sleep %>% head(3) %>% knitr::kable()
paste0("Where is the date column currently located: at column ",grep('date', colnames(act_sleep)))
## reordering
act_sleep <- act_sleep[,c(1,15,3,4,5,6,7,8,9,10,11,12,13,14,2,16,17,18)]
act_sleep %>% head(3) %>% knitr::kable()
act_extended <- rbind(mar_to_apr_act, daily_act)
act_extended %>% head(3) %>% knitr::kable()
## Data types present
sapply(act_sleep, class)
## Create a new DF with new categorical variable
days_used <- act_sleep %>%
group_by(id) %>%
summarize(days_used = n()) %>%
mutate(user_type = case_when(
days_used < 7 ~ "casual",
days_used < 16 ~ "moderate",
days_used < 23 ~ "frequent",
days_used < 33 ~ "active"
))
## Take a look
days_used %>%
group_by(user_type) %>%
summarize(amount = n()) %>%
mutate(percent_of_whole = (amount/24)*100) %>%
knitr::kable()
View(days_used)
days_used_count <- days_used %>%
group_by(user_type) %>%
summarize(amount = n())
View(days_used_count)
for_count_pie <- days_used_count %>%
mutate(csum = rev(cumsum(rev(count))),
pos = amount/2 + lead(csum, 1),
pos = if_else(is.na(pos), amount/2, pos))
for_count_pie <- days_used_count %>%
mutate(csum = rev(cumsum(rev(amount))),
pos = amount/2 + lead(csum, 1),
pos = if_else(is.na(pos), amount/2, pos))
library(readr)
scores <- read_csv("data_science/test_scores/scores.csv")
View(scores)
library(tidyverse)
colnames(scores)
scores %>% group_by(State) %>% summarize(n())
scores %>% group_by(Borough) %>% summarize(n())
colnames(scores)
library(janitor)
scores <- scores %>% clean_names()
colnames(scores)
scores %>% group_by(borough) %>% summarize(mean_white = mean(percent_white),
mean_total = mean(average_score_sat_math) +
mean(average_score_sat_reading) +
mean(average_score_sat_writing))
scores %>% group_by(borough) %>% summarize(mean_white = mean(percent_white))
summary(scores)
View(scores)
install.packages("languageserver")
View(scores)
View(scores)
View(scores)
library(readr)
pro_mma_fighters <- read_csv("mixed_data_science/pro_mma_fighters.csv")
View(pro_mma_fighters)
library(tidyverse)
View(pro_mma_fighters)
pro_mma_fighters %>% summary(wins_ko)
View(pro_mma_fighters)
pro_mma_fighters %>% group_by(weight_class) %>% summary(count=n())
pro_mma_fighters %>% group_by(weight_class) %>% summarize(count=n())
pro_mma_fighters %>% group_by(association) %>% summarize(count=n())
?typeof()
pro_mma_fighters[1]
pro_mma_fighters[[,1]]
pro_mma_fighters[,1]
pro_mma_fighters[1,1]
pro_mma_fighters[1,'height']
typeof(pro_mma_fighters[1,'height'])
typeof(pro_mma_fighters[1,'height'][1])
typeof(pro_mma_fighters[1,'height'][1][1])
len(pro_mma_fighters[1,'height'])
test <- pro_mma_fighters[1,'height']
test
test[1]
test[,1]
test[0]
test[0,1]
test <- pro_mma_fighters$height[1]
typeof(test)
test[1]
test[2]
test[0]
test[[1]]
substring(test,0,2)
substring(test,0,1)
integer(substring(test,0,1))
as.integer(substring(test,0,1))
as.integer(substring(test,3,5))
as.integer(substring(test,3,4))
pro_mma_fighters <- pro_mma_fighters %>%
mutate(height_num = as.integer(substring(height,0,1)) + as.integer(substring(height,3,4)))
View(pro_mma_fighters)
pro_mma_fighters <- pro_mma_fighters %>%
mutate(height_ft = as.integer(substring(height,0,1))
mutate(height_ft = as.integer(substring(height,0,1))
pro_mma_fighters <- pro_mma_fighters %>% select(-height_num)
pro_mma_fighters <- pro_mma_fighters %>%
mutate(height_ft = as.integer(substring(height,0,1)))
pro_mma_fighters <- pro_mma_fighters %>%
mutate(height_len = len(height))
pro_mma_fighters <- pro_mma_fighters %>%
mutate(height_len = length(height))
pro_mma_fighters <- pro_mma_fighters %>%
mutate(height_len = length(substring(height,0,)))
pro_mma_fighters <- pro_mma_fighters %>%
mutate(height_len = length(substring(height[1])))
pro_mma_fighters <- pro_mma_fighters %>%
mutate(height_len = substring(height,-2,-1))
pro_mma_fighters <- pro_mma_fighters %>%
mutate(height_len = substring(height,2,-1))
View(pro_mma_fighters)
pro_mma_fighters <- pro_mma_fighters %>%
mutate(height_string = as.string(height))
?as.string
pro_mma_fighters <- pro_mma_fighters %>%
mutate(height_string = toString(height))
View(pro_mma_fighters)
View(pro_mma_fighters)
setwd("C:/Users/wriky/hire_me_tests/acadec_EDA")
knitr::opts_chunk$set(echo = TRUE)
students <- read_csv('new_students.csv')
library(tidyverse)
library(readr)
students <- read_csv('new_students.csv')
View(students)
View(students)
